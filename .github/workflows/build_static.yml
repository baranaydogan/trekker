name: Static build

on:
  push:
    branches:
      - build
  pull_request:
    branches:
      - main

jobs:

  build_macOs_x86_64:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref || github.ref_name }}

    - name: Install x86_64 Homebrew
      shell: bash
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        echo >> /Users/runner/.bash_profile
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $GITHUB_PROFILE
        eval "$(/opt/homebrew/bin/brew shellenv)"

    - name: Install dependencies
      shell: bash
      run: |
        arch -x86_64 /opt/homebrew/bin/brew install llvm@18 libomp
        echo "/opt/homebrew/opt/llvm@18/bin:$PATH" >> $GITHUB_PATH
        echo "LDFLAGS=-L/opt/homebrew/opt/llvm@18/lib -L/opt/homebrew/opt/libomp/lib -Wl,-rpath,/opt/homebrew/opt/libomp/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/opt/llvm@18/include -I/opt/homebrew/opt/libomp/include" >> $GITHUB_ENV
        echo "OpenMP_C_FLAGS=-I/opt/homebrew/opt/llvm@18/include -I/opt/homebrew/opt/libomp/include -Xclang -fopenmp" >> $GITHUB_ENV
        echo "OpenMP_CXX_FLAGS=-I/opt/homebrew/opt/llvm@18/include -I/opt/homebrew/opt/libomp/include -Xclang -fopenmp" >> $GITHUB_ENV
        echo "OpenMP_C_LIB_NAMES=omp" >> $GITHUB_ENV
        echo "OpenMP_CXX_LIB_NAMES=omp" >> $GITHUB_ENV
        echo "OpenMP_omp_LIBRARY=/opt/homebrew/opt/libomp/lib/libomp.dylib" >> $GITHUB_ENV

    - name: Set up build directory and environment
      shell: bash
      run: |
        echo "arch=x86_64" >> "$GITHUB_ENV"
        echo "artifact_prefix=macos_${{ env.arch }}" >> "$GITHUB_ENV"
        echo "executable_name=trekker_${{ env.artifact_prefix }}" >> "$GITHUB_ENV"
        echo "ARTIFACT_NAME=${{ env.artifact_prefix }}_binaries" >> "$GITHUB_ENV"
        echo "build_type=Release" >> "$GITHUB_ENV"
        echo "build-output-dir=${{ github.workspace }}/build_${{ env.artifact_prefix }}" >> "$GITHUB_ENV"
        

    - name: Configure CMake
      shell: bash
      run: |
        eval "$(/opt/homebrew/bin/brew shellenv)"
        arch -x86_64 cmake -B ${{ env.build-output-dir }} \
          -DCMAKE_BUILD_TYPE=${{ env.build_type }} \
          -DCMAKE_C_COMPILER=/opt/homebrew/opt/llvm@18/bin/clang \
          -DCMAKE_CXX_COMPILER=/opt/homebrew/opt/llvm@18/bin/clang++ \
          -DCMAKE_OSX_ARCHITECTURES=${{ env.arch }} \
          -DBUILD_SHARED_LIBS=OFF \
          -DDEFINE_CUDA=OFF \
          -DOpenMP_C_FLAGS="${{ env.OpenMP_C_FLAGS }}" \
          -DOpenMP_CXX_FLAGS="${{ env.OpenMP_CXX_FLAGS }}" \
          -DOpenMP_C_LIB_NAMES="${{ env.OpenMP_C_LIB_NAMES }}" \
          -DOpenMP_CXX_LIB_NAMES="${{ env.OpenMP_CXX_LIB_NAMES }}" \
          -DOpenMP_omp_LIBRARY="${{ env.OpenMP_omp_LIBRARY }}" \
          -S ${{ github.workspace }}


    - name: Build
      run: arch -x86_64 cmake --build ${{ env.build-output-dir }} --config ${{ env.build_type }} --target install

    - name: Rename executable
      shell: bash
      run: |
        mv ${{ env.build-output-dir }}/install/bin/trekker* ${{ env.build-output-dir }}/install/bin/${{ env.executable_name }}

    - name: Upload binaries as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.build-output-dir }}/install/bin/${{ env.executable_name }}
        if-no-files-found: error
        retention-days: 5



  build_macOs_arm64:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref || github.ref_name }}

    - name: Install dependencies
      shell: bash
      run: |
        brew install llvm@18 libomp
        echo "PATH=/opt/homebrew/opt/llvm@18/bin:$PATH" >> $GITHUB_PATH
        echo "LDFLAGS=-L/opt/homebrew/opt/llvm@18/lib -L/opt/homebrew/opt/libomp/lib -Wl,-rpath,/opt/homebrew/opt/libomp/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/opt/llvm@18/include -I/opt/homebrew/opt/libomp/include" >> $GITHUB_ENV
        echo "OpenMP_C_FLAGS=-I/opt/homebrew/opt/llvm@18/include -I/opt/homebrew/opt/libomp/include -Xclang -fopenmp" >> $GITHUB_ENV
        echo "OpenMP_CXX_FLAGS=-I/opt/homebrew/opt/llvm@18/include -I/opt/homebrew/opt/libomp/include -Xclang -fopenmp" >> $GITHUB_ENV
        echo "OpenMP_C_LIB_NAMES=omp" >> $GITHUB_ENV
        echo "OpenMP_CXX_LIB_NAMES=omp" >> $GITHUB_ENV
        echo "OpenMP_omp_LIBRARY=/opt/homebrew/opt/libomp/lib/libomp.dylib" >> $GITHUB_ENV

    - name: Set up build directory and environment
      shell: bash
      run: |
        echo "arch=arm64" >> "$GITHUB_ENV"
        echo "artifact_prefix=macos_${{ env.arch }}" >> "$GITHUB_ENV"
        echo "executable_name=trekker_${{ env.artifact_prefix }}" >> "$GITHUB_ENV"
        echo "ARTIFACT_NAME=${{ env.artifact_prefix }}_binaries" >> "$GITHUB_ENV"
        echo "build_type=Release" >> "$GITHUB_ENV"
        echo "build-output-dir=${{ github.workspace }}/build_${{ env.artifact_prefix }}" >> "$GITHUB_ENV"
        

    - name: Configure CMake
      shell: bash
      run: |
        cmake -B ${{ env.build-output-dir }} \
          -DCMAKE_BUILD_TYPE=${{ env.build_type }} \
          -DCMAKE_C_COMPILER=/opt/homebrew/opt/llvm@18/bin/clang \
          -DCMAKE_CXX_COMPILER=/opt/homebrew/opt/llvm@18/bin/clang++ \
          -DCMAKE_OSX_ARCHITECTURES=${{ env.arch }} \
          -DBUILD_SHARED_LIBS=OFF \
          -DDEFINE_CUDA=OFF \
          -DOpenMP_C_FLAGS="${{ env.OpenMP_C_FLAGS }}" \
          -DOpenMP_CXX_FLAGS="${{ env.OpenMP_CXX_FLAGS }}" \
          -DOpenMP_C_LIB_NAMES="${{ env.OpenMP_C_LIB_NAMES }}" \
          -DOpenMP_CXX_LIB_NAMES="${{ env.OpenMP_CXX_LIB_NAMES }}" \
          -DOpenMP_omp_LIBRARY="${{ env.OpenMP_omp_LIBRARY }}" \
          -S ${{ github.workspace }}


    - name: Build
      run: cmake --build ${{ env.build-output-dir }} --config ${{ env.build_type }} --target install

    - name: Rename executable
      shell: bash
      run: |
        mv ${{ env.build-output-dir }}/install/bin/trekker* ${{ env.build-output-dir }}/install/bin/${{ env.executable_name }}

    - name: Upload binaries as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.build-output-dir }}/install/bin/${{ env.executable_name }}
        if-no-files-found: error
        retention-days: 5


  build_ubuntu:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref || github.ref_name }}

    - name: Install dependencies
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y gcc-14 g++-14 libomp-dev
        
    - name: Set up build directory and environment
      shell: bash
      run: |
        echo "artifact_prefix=linux" >> "$GITHUB_ENV"
        echo "executable_name=trekker_${{ env.artifact_prefix }}" >> "$GITHUB_ENV"
        echo "ARTIFACT_NAME=${{ env.artifact_prefix }}_binaries" >> "$GITHUB_ENV"
        echo "build_type=Release" >> "$GITHUB_ENV"
        echo "build-output-dir=${{ github.workspace }}/build_${{ env.artifact_prefix }}" >> "$GITHUB_ENV"

    - name: Configure CMake (Ubuntu)
      shell: bash
      run: |
        cmake -B ${{ env.build-output-dir }} \
          -DCMAKE_BUILD_TYPE=${{ env.build_type }} \
          -DCMAKE_C_COMPILER=gcc-14 \
          -DCMAKE_CXX_COMPILER=g++-14 \
          -DBUILD_SHARED_LIBS=OFF \
          -DDEFINE_CUDA=OFF \
          -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ env.build-output-dir }} --config ${{ env.build_type }} --target install

    - name: Rename executable
      shell: bash
      run: |
        mv ${{ env.build-output-dir }}/install/bin/trekker* ${{ env.build-output-dir }}/install/bin/${{ env.executable_name }}

    - name: Upload binaries as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.build-output-dir }}/install/bin/${{ env.executable_name }}
        if-no-files-found: error
        retention-days: 5


  create-universal-binary:
    needs: [build_macOs_arm64, build_macOs_x86_64]
    runs-on: macos-latest
    steps:
      - name: Set up build directory
        shell: bash
        run: echo "build-output-dir=${{ github.workspace }}/build_universal" >> "$GITHUB_ENV"

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64_binaries
          path: ${{ env.build-output-dir }}/arm64

      - name: Download x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-x86_64_binaries
          path: ${{ env.build-output-dir }}/x86_64

      - name: Create Universal Binary with lipo
        run: |
          lipo -create ${{ env.build-output-dir }}/arm64/trekker_macos_arm64 ${{ env.build-output-dir }}/x86_64/trekker_macos_x86_64 -output ${{ env.build-output-dir }}/trekker_macos

      - name: Upload universal binary
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal_binaries
          path: ${{ env.build-output-dir }}/trekker_macos
          if-no-files-found: error
          retention-days: 5
